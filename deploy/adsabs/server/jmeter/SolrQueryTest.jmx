<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.4" jmeter="2.9 r1437961">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="PerformanceTest" enabled="true">
      <stringProp name="TestPlan.comments">Set of queries to run against the ADS SOLR instance</stringProp>
      <boolProp name="TestPlan.functional_mode">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="baseDir" elementType="Argument">
            <stringProp name="Argument.name">baseDir</stringProp>
            <stringProp name="Argument.value">${__P(baseDir,.)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="noOfUsers" elementType="Argument">
            <stringProp name="Argument.name">noOfUsers</stringProp>
            <stringProp name="Argument.value">${__P(noOfUsers,6)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="durationInSecs" elementType="Argument">
            <stringProp name="Argument.name">durationInSecs</stringProp>
            <stringProp name="Argument.value">${__P(durationInSecs, 240)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="rampUpInSecs" elementType="Argument">
            <stringProp name="Argument.name">rampUpInSecs</stringProp>
            <stringProp name="Argument.value">${__P(rampUpInSecs,30)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="serverName" elementType="Argument">
            <stringProp name="Argument.name">serverName</stringProp>
            <stringProp name="Argument.value">${__P(serverName,adswhy)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="serverPort" elementType="Argument">
            <stringProp name="Argument.name">serverPort</stringProp>
            <stringProp name="Argument.value">${__P(serverPort,9000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="queryFile" elementType="Argument">
            <stringProp name="Argument.name">queryFile</stringProp>
            <stringProp name="Argument.value">${__P(queryFile,/dvt/workspace/montysolr/contrib/examples/adsabs/jmeter/field.queries)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="ThreadGroup" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${noOfUsers}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${rampUpInSecs}</stringProp>
        <longProp name="ThreadGroup.start_time">1372273046000</longProp>
        <longProp name="ThreadGroup.end_time">1339700547000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${durationInSecs}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">jmeter</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">\t</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="filename">${queryFile}</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">All threads</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">QUERY,CONDITION</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${QUERY}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
              </elementProp>
              <elementProp name="xid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">jmeter</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">xid</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${serverName}</stringProp>
          <stringProp name="HTTPSampler.port">${serverPort}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout">6000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">60000</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/solr/select</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>false</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>false</assertions>
                <subresults>false</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <sampleCount>true</sampleCount>
                <idleTime>true</idleTime>
              </value>
            </objProp>
            <stringProp name="filename">${baseDir}/aggregate_graph.data</stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
                <sampleCount>true</sampleCount>
                <idleTime>true</idleTime>
              </value>
            </objProp>
            <stringProp name="filename">${baseDir}/aggregate_report.data</stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="SplineVisualizer" testclass="ResultCollector" testname="Spline Visualizer" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
              </value>
            </objProp>
            <stringProp name="TestPlan.comments">Use this only for debugging</stringProp>
            <stringProp name="filename"></stringProp>
            <boolProp name="ResultCollector.success_only_logging">true</boolProp>
          </ResultCollector>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
            <stringProp name="XPathExtractor.default">-1</stringProp>
            <stringProp name="XPathExtractor.refname">numFound</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">/response/result/@numFound</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
            <stringProp name="XPathExtractor.default">-1</stringProp>
            <stringProp name="XPathExtractor.refname">qTime</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">/response/lst[@name=&quot;responseHeader&quot;]/int[@name=&quot;QTime&quot;]</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">
log.info(&quot;q=&quot; + vars.get(&quot;QUERY&quot;) + &quot;; numFound=&quot; + vars.get(&quot;numFound&quot;) + &quot;; qTime=&quot; + vars.get(&quot;qTime&quot;) + &quot;cond: &quot; + vars.get(&quot;CONDITION&quot;));

cond = vars.get(&quot;CONDITION&quot;);
numFound = new Integer(vars.get(&quot;numFound&quot;));

if (!cond.trim().equals(&quot;&quot;)) {
  cond = cond.trim();
  if (cond.contains(&quot;&gt;=&quot;)) {
    log.info(&quot;numFound: &quot; + numFound + &quot; &gt;= &quot; + cond.substring(2));
    log.info(numFound &gt;= new Integer(cond.substring(2)) ? &quot;OK&quot; : &quot;NO&quot;);
  }
  else if (cond.contains(&quot;&lt;=&quot;)) {
    log.info(&quot;numFound: &quot; + numFound + &quot; &lt;= &quot; + cond.substring(2));
    log.info(numFound &lt;= new Integer(cond.substring(2)) ? &quot;OK&quot; : &quot;NO&quot;);
  }
  else if (cond.contains(&quot;&gt;&quot;)) {
    log.info(&quot;numFound: &quot; + numFound + &quot; &gt; &quot; + cond.substring(1));
    log.info(numFound &gt; new Integer(cond.substring(2)) ? &quot;OK&quot; : &quot;NO&quot;);
  }
  else if (cond.contains(&quot;&lt;&quot;)) {
    log.info(&quot;numFound: &quot; + numFound + &quot; &lt; &quot; + cond.substring(1));
    log.info(numFound &lt; new Integer(cond.substring(2)) ? &quot;OK&quot; : &quot;NO&quot;);
  }
  else if (cond.contains(&quot;=&quot;)) {
    log.info(&quot;numFound: &quot; + numFound + &quot; = &quot; + cond.substring(1));
    log.info(numFound == new Integer(cond.substring(2)) ? &quot;OK&quot; : &quot;NO&quot;);
  }
}
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>true</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <sampleCount>true</sampleCount>
                <idleTime>true</idleTime>
              </value>
            </objProp>
            <stringProp name="filename">${baseDir}/summary_report.data</stringProp>
          </ResultCollector>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">//log.info(&quot;q=&quot; + vars.get(&quot;QUERY&quot;) + &quot;; numFound=&quot; + vars.get(&quot;numFound&quot;) + &quot;; qTime=&quot; + vars.get(&quot;qTime&quot;) + &quot;cond: &quot; + vars.get(&quot;CONDITION&quot;));

if (ResponseCode.equals(&quot;200&quot;) == true) {

cond = vars.get(&quot;CONDITION&quot;);
numFound = new Integer(vars.get(&quot;numFound&quot;));

if (!cond.equals(&quot;&lt;EOF&gt;&quot;) &amp;&amp; !cond.trim().equals(&quot;&quot;)) {
  cond = cond.trim();
  if (cond.contains(&quot;&gt;=&quot;)) {
    //log.info(&quot;numFound: &quot; + numFound + &quot; &gt;= &quot; + cond.substring(2));
    Failure = numFound &gt;= new Integer(cond.substring(2)) ? false : true;
  }
  else if (cond.contains(&quot;&lt;=&quot;)) {
    //log.info(&quot;numFound: &quot; + numFound + &quot; &lt;= &quot; + cond.substring(2));
    Failure = numFound &lt;= new Integer(cond.substring(2)) ? false : true;
  }
  else if (cond.contains(&quot;&gt;&quot;)) {
    //log.info(&quot;numFound: &quot; + numFound + &quot; &gt; &quot; + cond.substring(1));
    Failure = numFound &gt; new Integer(cond.substring(2)) ? false : true;
  }
  else if (cond.contains(&quot;&lt;&quot;)) {
    //log.info(&quot;numFound: &quot; + numFound + &quot; &lt; &quot; + cond.substring(1));
    Failure = numFound &lt; new Integer(cond.substring(1)) ? false : true;
  }
  else if (cond.contains(&quot;=&quot;)) {
    //log.info(&quot;numFound: &quot; + numFound + &quot; = &quot; + cond.substring(1));
    Failure = numFound.equals(new Integer(cond.substring(1))) ? false : true;
  }

  if (Failure == true) {
    FailureMessage = &quot;Wrong number of results: numFound=&quot; + numFound + &quot; expected: &quot; + cond;
  }
  //log.info(FailureMessage);
}

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">true</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>true</responseData>
                <samplerData>true</samplerData>
                <xml>true</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <url>true</url>
              </value>
            </objProp>
            <stringProp name="filename">${baseDir}/view_results_tree.data</stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
          <stringProp name="BeanShellAssertion.query">//log.info(&quot;q=&quot; + vars.get(&quot;QUERY&quot;) + &quot;; numFound=&quot; + vars.get(&quot;numFound&quot;) + &quot;; qTime=&quot; + vars.get(&quot;qTime&quot;) + &quot;cond: &quot; + vars.get(&quot;CONDITION&quot;));

if (ResponseCode.equals(&quot;200&quot;) == true) {

cond = vars.get(&quot;CONDITION&quot;);
numFound = new Integer(vars.get(&quot;numFound&quot;));

if (!cond.equals(&quot;&lt;EOF&gt;&quot;) &amp;&amp; !cond.trim().equals(&quot;&quot;)) {
  cond = cond.trim();
  if (cond.contains(&quot;&gt;=&quot;)) {
    //log.info(&quot;numFound: &quot; + numFound + &quot; &gt;= &quot; + cond.substring(2));
    Failure = numFound &gt;= new Integer(cond.substring(2)) ? false : true;
  }
  else if (cond.contains(&quot;&lt;=&quot;)) {
    //log.info(&quot;numFound: &quot; + numFound + &quot; &lt;= &quot; + cond.substring(2));
    Failure = numFound &lt;= new Integer(cond.substring(2)) ? false : true;
  }
  else if (cond.contains(&quot;&gt;&quot;)) {
    //log.info(&quot;numFound: &quot; + numFound + &quot; &gt; &quot; + cond.substring(1));
    Failure = numFound &gt; new Integer(cond.substring(2)) ? false : true;
  }
  else if (cond.contains(&quot;&lt;&quot;)) {
    //log.info(&quot;numFound: &quot; + numFound + &quot; &lt; &quot; + cond.substring(1));
    Failure = numFound &lt; new Integer(cond.substring(1)) ? false : true;
  }
  else if (cond.contains(&quot;=&quot;)) {
    //log.info(&quot;numFound: &quot; + numFound + &quot; = &quot; + cond.substring(1));
    Failure = numFound.equals(new Integer(cond.substring(1))) ? false : true;
  }

  if (Failure == true) {
    FailureMessage = &quot;Wrong number of results: numFound=&quot; + numFound + &quot; expected: &quot; + cond;
  }
  //log.info(FailureMessage);
}

}</stringProp>
          <stringProp name="BeanShellAssertion.filename"></stringProp>
          <stringProp name="BeanShellAssertion.parameters"></stringProp>
          <boolProp name="BeanShellAssertion.resetInterpreter">true</boolProp>
        </BeanShellAssertion>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>true</responseData>
                <samplerData>true</samplerData>
                <xml>true</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <url>true</url>
              </value>
            </objProp>
            <stringProp name="filename">${baseDir}/view_results_tree.data</stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <Summariser guiclass="SummariserGui" testclass="Summariser" testname="Generate Summary Results" enabled="true"/>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
