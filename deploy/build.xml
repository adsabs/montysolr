<?xml version="1.0"?>

<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
 
        http://www.apache.org/licenses/LICENSE-2.0
 
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
 -->


<project name="examples" default="default" xmlns:ivy="antlib:org.apache.ivy.ant">

	<description> Examples for MontySolr </description>

	<import file="../contrib-build.xml" />

	<!--                configuration of targets
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //-->
	<condition property="example.name" value="adsabs">
		<not>
			<isset property="ename" />
		</not>
	</condition>
	<property name="example.name" value="${ename}" />

	<condition property="example.ignore-environment" value="true">
		<not>
			<isset property="ignore-environment" />
		</not>
	</condition>
	<property name="example.ignore-environment" value="${ignore-environment}" />


	<condition property="example.profile" value="normal">
		<not>
			<isset property="profile" />
		</not>
	</condition>
	<property name="example.profile" value="${profile}" />

	<property environment="env" />
	<property name="subant.jvmargs" value="" />
	<property name="subant.args" value="" />
	<property name="subant.newenvironment" value="true" />
	<property name="env.MONTYSOLR_JVMARGS" value="${subant.jvmargs}" />
	<property name="env.MONTYSOLR_ARGS" value="${subant.args}" />
	<property name="env.MONTYSOLR_NEWENVIRONMENT" value="${subant.newenvironment}" />
	<property name="env.PYTHONPATH" value="${common.dir}/build/dist${path.separator}${common.dir}/src/python${path.separator}" />

	<target name="init">
		<exec executable="${python}" failonerror="true" outputproperty="example.webapp" logerror="true">
			<arg value="-c" />
			<arg value="import os;d='${basedir}/${example.name}';print os.path.exists(d+'/webapps/solr.war') and d+'/webapps/solr.war' or d+'/webapps'" />
		</exec>
	</target>

	<target name="populate-classpath" unless="classpath.populated">

		<!-- 
     we include only the classpaths that are inside 
     the example, so that it can run without anything 
     else -->

		<path id="examples.classpath">
			<fileset dir="${build.dir}/${example.name}/">
				<include name="solrwar/WEB-INF/lib/**/*.jar" />
				<include name="solr/lib/**/*.jar" />
				<include name="lib/**/*.jar" />
			</fileset>

			<pathelement location="${build.dir}/${example.name}/jython"/>
		</path>



		<path id="classpath">
			<path refid="examples.classpath" />
		</path>

		<path id="test.classpath">
			<!-- MontySolr test classes -->
			<pathelement location="${common.dir}/build/classes/test"/>

			<path refid="common.test.classpath" />
			<path refid="test.base.classpath"/>
			<path refid="examples.classpath" />
		</path>

		<!--
		<echo>classpath: ${toString:classpath}</echo>
		<echo>test.classpath: ${toString:test.classpath}</echo>
		-->

		<property name="classpath.populated" value="true"/>
	</target>


	<target name="default" depends="jar,build-all-examples" />

	<target name="build-all-examples" description="Assembles all examples">
		<exec executable="${prop.ant}" failonerror="true">
			<arg line="build-one -Dename=adsabs" />
		</exec>
	</target>

	<target name="jar-core" description="Packages the JAR file">
		<!-- does nothing on purpose //-->
	</target>

	<target name="build-all" depends="resolve,build-one">
		<echo>
    	    Does nothing, because build-all is called from the main build and at that time we don't have all jars for contribs yet.
    	    Call build-all-examples instead 
    	</echo>
	</target>

	<target name="build">
		<echo>
         Please use: ant build-one -Dename={name}
         We have intentionally disabled the 'build' target to avoid confusion
	   </echo>
		<fail />
	</target>

	<target name="build-one" description="Assembles distribution, usage: ant build-one -Dename={example-name} (-Dprofile={profile})" >
		<!-- (temporary) remove our libraries -->
        <ant target="unlink-upstream" dir="${basedir}/../antlrqueryparser"  inheritall="false" />
		<ant target="unlink-upstream" dir="${basedir}/../adsabs"  inheritall="false" />
		
		<!-- build solr distribution -->
		<ant target="package" dir="${prop.solr.real.location}"  inheritall="false" />
		
		<echo>Building: ${build.dir}/${example.name}</echo>
		<delete dir="${build.dir}/${example.name}" />
		<unzip dest="${build.dir}"> 
			<fileset dir="${prop.solr.real.location}/package"> 
				<include name="*.zip"/> 
			</fileset> 
		</unzip>
		
		<copy todir="${build.dir}/${example.name}">
			<fileset dir="${build.dir}"> 
                <include name="solr*/**"/>
            </fileset>
			<regexpmapper from="solr-[^/]*/(.*)" to="\1" />
		</copy>
		
		<!-- build our own libraries -->
		<ant target="jar" dir="${basedir}/../antlrqueryparser"  inheritall="false" />
        <ant target="jar" dir="${basedir}/../adsabs"  inheritall="false" />

		<!-- fetch them -->
		<ant target="get-jar" dir="${basedir}/../antlrqueryparser"  inheritall="false" />
        <ant target="get-jar" dir="${basedir}/../adsabs"  inheritall="false" />
		
		<!-- copy our jars into the solr (necessary, can't be inside ./lib) -->
		<copy todir="${build.dir}/${example.name}/server/solr-webapp/webapp/WEB-INF/lib" flatten="true">
			<fileset dir="${common.build.dir}"> 
                <include name="**/montysolr-*.jar"/>
            </fileset>
		</copy>
		
		<!-- copy log4j json logging (next to other log4j stuff) -->
        <copy todir="${build.dir}/${example.name}/server/lib/ext" flatten="true">
        	<fileset dir="${basedir}/lib">
                <include name="**/log4j*.jar"/>
            </fileset>
        </copy>
		
        <!-- gather and copy the python code to example/python -->
		<echo>Putting Jython code together into: "${build.dir}/${example.name}/server/resources</echo>
        <copy todir="${build.dir}/${example.name}/server/resources" flatten="false" overwrite="true">
            <fileset dir="${common.dir}/contrib">
                <include name="**/src/jython/**/*.py" />
            </fileset>
            <regexpmapper from=".*/src/jython/(.*)" to="\1" />
        </copy>

        <!-- set the python/jython files not-readable so that i am not tempted to mess w/ them -->
        <chmod perm="ugo-x">
            <fileset dir="${build.dir}/${example.name}/server/resources">
            	<include name="*.py" />
                <include name="**/*.py" />
            </fileset>
        </chmod>
		
		<!-- include jars that should be included -->
		<ivy:retrieve/>
		<copy todir="${build.dir}/${example.name}/server/solr-webapp/webapp/WEB-INF/lib" flatten="true" overwrite="true" verbose="true">
            <fileset dir="${basedir}/lib">
                <include name="antlr*.jar" />
            	<include name="hamcrest*.jar" />
            	<include name="string*.jar" />
            	<include name="jython*.jar" />
            </fileset>
			<fileset dir="${basedir}/../adsabs">
                <include name="extra-lib/junidecode*.jar" />
            </fileset>
        </copy>
		
		<!-- copy over our configuration files -->
        <copy todir="${build.dir}/${example.name}" overwrite="true">
            <fileset dir="${basedir}/${example.name}">
                <include name="**/**" />
            </fileset>
        </copy>
		
		<!-- set configuration based on the name of the profile -->
		<copy todir="${build.dir}/${example.name}/bin" flatten="false" overwrite="true" verbose="true">
            <fileset dir="${basedir}/${example.name}">
                <include name="bin/solr.in*${example.profile}" />
            </fileset>
            <regexpmapper from="(bin/solr.in.[^.]+).(${example.profile})" to="\1" />
        </copy>
		
		<!-- fix some solr problems -->
		<chmod perm="ugo+x">
            <fileset dir="${build.dir}/${example.name}/bin">
                <include name="solr" />
            </fileset>
        </chmod>
		
		<echo>
		    The distribution is ready in: ${build.dir}/${example.name}
		    You can start solr by: ${build.dir}/${example.name}/bin/solr start
	    </echo>

	</target>


	<target name="run" description="Run the example, usage: ant run -Dename={example-name} (-Dprofile={profile})">
		<exec executable="bash" failonerror="true"  >
            <arg value="${build.dir}/${example.name}/bin/solr" />
			<arg value="start" />
			<arg value="-f" />
        </exec>
	</target>

	<target name="stop" description="Stop the example, usage: ant stop -Dename={example-name} (-Dprofile={profile})">
        <exec executable="bash" failonerror="true">
            <arg value="${build.dir}/${example.name}/bin/solr" />
            <arg value="stop" />
        </exec>
    </target>

	<target name="test" depends="build-one,populate-classpath,common.test" />
	<target name="compile-core" depends="populate-classpath,common.compile-core"/>
    <target name="unlink-upstream" />


	<target name="release" description="Builds a release package" depends="build-one">
		<zip destfile="${build.dir}/${example.name}.zip" basedir="${build.dir}/${example.name}" duplicate="preserve" > 
            <fileset dir="${build.dir}/${example.name}"> 
                <include name="*"/> 
            </fileset> 
        </zip>
	</target>
</project>