<?xml version="1.0"?>
<project name="montysolr" default="usage">

	<description>Java extensions for Python - Java search engine made python-friendly</description>


	<!--
  ==================================================================
     Configuration section
  ==================================================================
  -->


	<property name="montysolr.home" location="." />
	<property name="src.dir.java" location="src/java" />
	<property name="build.dir" location="build" />
	<property name="dist.dir" value="build/dist" />
	<property name="classes.dir" value="build/classes/java" />

	<property file="build.properties" />

	<property name="solr.home" location="${build.dir}/solr-download/apache-solr-${solr.version}"/>
	<property name="webdist.home" location="${webdist}" />
	<property name="lib.dir" value="lib" />
	<property name="app.name" value="montysolr_java" />
	<property name="app.solr.name" value="solr_java" />
	<property name="app.version" value="${solr.version}.${montysolr.version}" />
	<property name="jar.suffix" value="${app.name}-${app.version}.jar" />
	<property name="ddash" value="--" />


	<property name="solr.branch" value="branch_7_7" />

	<import file="common-build.xml"/>
	<path id="classpath">
		<path refid="common.classpath"/>
	</path>
	<path id="test.classpath">
		<path refid="common.test.classpath"/>
	</path>
	<path id="junit.classpath">
		<path refid="common.junit.classpath"/>
	</path>



	<!--
      ==================================================================
         Initialization & maintenance
      ==================================================================
      -->

	<target name="compile-test" depends="compile,common.compile-test" />

	<target name="config" depends="init">
		<property name="montysolr.jar" value="${build.dir}/${final.name}.jar" />
	</target>

	<!-- Default target: usage.  Prints out instructions. -->
	<target name="usage"
	          description="Prints out instructions">
		<echo message="Welcome to the MontySolr project!" />
		<echo message="Use 'ant build-all' to compile MontySolr and all its modules" />
		<echo message="Use 'ant build-example' to prepare standalone distribution." />

		<echo message="And for developers:"/>
		<echo message="Use 'ant clean' to clean compiled files." />
		<echo message="Use 'ant compile' to compile the Java source code." />
		<echo message="Use 'ant test-all' to run unit tests." />
	</target>




	<!-- this is needed for all targets -->
	<target name="init" depends="check_properties,die_unless_propertiesOK,check-solr-location">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${classes.dir}" />
		<mkdir dir="${build.dir}/jar" />
	</target>


	<target name="check_properties">
		<condition property="propertiesOK">
			<and>
				<isset property="montysolr.version" />
				<isset property="solr.version" />
			</and>
		</condition>
	</target>

	<target name="die_unless_propertiesOK" unless="propertiesOK">
		<echo>The properties of the project are not set correctly. Copy "build.properties.default" -> "build.properties" and edit the new file if necessary.</echo>
		<fail />
	</target>



	<target name="clean" depends="unlink-contrib">
		<delete dir="${build.dir}"/>
		<delete dir="${classes.dir}"/>
		<mkdir dir="${classes.dir}"/>
	</target>

	<target name="default" depends="usage" />


	<!--
      ==================================================================
         Compilation section for jars
      ==================================================================
      -->

	<!-- this is needed for building targets -->
	<target name="config-build" depends="config,check-solr-location,write-properties" >
		<property name="_properties.written" value="true" />
	</target>



	<target name="test" depends="write-properties" description="Run tests for core and contrib">
		<antcall target="common.test" inheritall="true" inheritrefs="true"/>
		<antcall target="test-contrib" inheritall="true" inheritrefs="true"/>
	</target>


	<!-- obsolete: redirecting to test -->
	<target name="test-all" depends="test" />


	<!-- writes into a simple format various config variables, they can be used by unittests/java -->
	<target name="write-properties" depends="config">
		<echo file="${build.dir}/build.properties">
message=Automatically generated by ant during compilation of MontySolr, do not change!
solr.home=${solr.home}
solr.real.location=${solr.real.location}
lucene.real.location=${lucene.real.location}    
montysolr.version=${montysolr.version}
solr.version=${solr.version}		   	
		   </echo>

		<!-- necessary only on windows (git bash) -->
		<replaceregexp file="${build.dir}/build.properties"
		               match="\\"
		               replace="/"
			           flags="g"/>
	</target>





	<!--
    ==================================================================
     Commands for a lazy developer
    ==================================================================
    -->

	<target name="build" description="Builds MontySOLR" depends="get-solr,write-properties,jar,build-contrib" />

	<target name="build-contrib" description="Builds just the contrib parts">
		<sequential>
			<ant target="build-all"  antfile="build.xml" dir="${common.dir}/contrib/antlrqueryparser"  inheritall="false" />
			<ant target="build-all"  antfile="build.xml" dir="${common.dir}/contrib/adsabs"  inheritall="false" />
			<ant target="build-all"  antfile="build.xml" dir="${common.dir}/contrib/examples"  inheritall="false" />
		</sequential>
	</target>
	
	<target name="build-all" description="Builds Montysolr + the distribution" depends="build">
		<ant target="release"  dir="${common.dir}/contrib/examples"  inheritall="false" />
	</target>
	
	<target name="release" description="To build github release" depends="build">
        <ant target="release"  dir="${common.dir}/contrib/examples"  inheritall="false" />
		<move file="${build.dir}/contrib/examples/adsabs.zip" tofile="${build.dir}/contrib/examples/montysolr.zip" />
		<!-- TODO: automatically bump the release in the source and upload the binary file to github -->
    </target>

	<target name="test-contrib" description="Tests contrib parts">
		<ant target="test"  dir="${common.dir}/contrib/antlrqueryparser"  inheritall="false" />
		<ant target="test"  dir="${common.dir}/contrib/adsabs"  inheritall="false" />
		<ant target="test"  dir="${common.dir}/contrib/examples"  inheritall="false" />
	</target>

    <target name="unlink-contrib" >
    	<ant target="unlink-upstream"  dir="${common.dir}/contrib/antlrqueryparser"  inheritall="false" />
    	<ant target="unlink-upstream"  dir="${common.dir}/contrib/adsabs"  inheritall="false" />
    	<ant target="unlink-upstream"  dir="${common.dir}/contrib/examples"  inheritall="false" />
	</target>

	<target name="link-contrib" >
        <ant target="link-upstream"  dir="${common.dir}/contrib/antlrqueryparser"  inheritall="false" />
        <ant target="link-upstream"  dir="${common.dir}/contrib/adsabs"  inheritall="false" />
        
    </target>


	<!--
    ====================================================================
                   Installation goodies
    ====================================================================
    -->


	<target name="get-solr"
      depends="get-solr-source-code,check-solr-location,build-solr-example,extract-solr-jars">
	</target>



	<!-- this is for development purposes - especially when lucene/solr stable releases are not yet there -->
	<target name="get-solr-source-code">
		<mkdir dir="${solr.home}"/>
		<exec executable="git" failifexecutionfails="false" dir="${solr.home}">
			<arg value="clone" />
			<arg value="https://github.com/apache/lucene-solr.git" />
			<arg value="${solr.home}" />
		</exec>
		<exec executable="git" failifexecutionfails="true" dir="${solr.home}">
			<arg value="checkout" />
			<arg value="${solr.branch}" />
		</exec>
		<antcall target="check-solr-location" />
	</target>


	<!-- 
	   this target sets the location of the solr, if not present, we'll assume 
	   build/solr-download/apache-solr-${solr.version}/solr
	   The property may also be set by a download-solr task
	 -->
	<target name="check-solr-location" >
		<condition property="solr.real.location" value="${solr.home}">
			<and>
				<available file="${solr.home}/example/README.txt"/>
				<available file="${solr.home}/contrib/contrib-build.xml"/>
			</and>
		</condition>

		<condition property="solr.real.location" value="${solr.home}/solr">
			<and>
				<available file="${solr.home}/solr/example/README.txt"/>
				<available file="${solr.home}/solr/contrib/contrib-build.xml"/>
			</and>
		</condition>

		<condition property="solr.real.location" value="${build.dir}/solr-download/apache-solr-${solr.version}/solr">
			<and>
				<available file="${build.dir}/solr-download/apache-solr-${solr.version}/solr/example/README.txt"/>
				<available file="${build.dir}/solr-download/apache-solr-${solr.version}/solr/contrib/contrib-build.xml"/>
			</and>
		</condition>

		<echo message="Did we find solr location? Path=${solr.real.location}"/>
		<property name="lucene.real.location" location="${solr.real.location}/../lucene" />
	</target>


	<target name="build-solr-example" depends="check-solr-location,build-montysolr-dependencies">
		<echo>Building the Solr example</echo>

		<exec executable="${ant}" dir="${solr.real.location}" logerror="true">
			<env key="PATH" value="${ant.home}/bin${path.separator}${env.PATH}" />
			<arg value="server" />
		</exec>

	</target>

	<target name="build-montysolr-dependencies" depends="check-solr-location">
		<ant target="build-modules" dir="${lucene.real.location}"  inheritall="false" />
        <ant target="dist-contrib" dir="${solr.real.location}"  inheritall="false" />
		<ant target="dist-test-framework" dir="${solr.real.location}"  inheritall="false" />
	</target>


	<target name="check-solr-jars-exist" depends="check-solr-location" >
		<!-- since on old ant we cannot ignore it -->
		<mkdir dir="${solr.real.location}/dist" />
		<mkdir dir="${build.dir}/solrjars-extracted" />

		<path id="montysolr.classpath.testing">
			<fileset dir="${build.dir}/solrjars-extracted" includes="**/*.jar" />
		</path>

		<condition property="solr.jars.exist" value="true">
			<and>
				<available classname="org.apache.lucene.spatial.tier.InvalidGeoException" classpath="${toString:montysolr.classpath.testing}" />
			</and>
		</condition>

		<echo message="Are lucene jars available? ${solr.jars.exist}" level="verbose" />
	</target>

	<!-- copy all useful (for development useful) jars from solr to our project -->
	<target name="extract-solr-jars" depends="check-solr-jars-exist" unless="solr.jars.exist">

		<delete dir="${build.dir}/solrjars-extracted" />

		<!-- copy lucene jars -->
		<copy todir="${build.dir}/solrjars-extracted/lucene" flatten="true">
			<fileset dir="${lucene.real.location}/build">
				<include name="**/**.jar"/>
			</fileset>
		</copy>

		<!-- copy solr jars -->
		<copy todir="${build.dir}/solrjars-extracted/solr">
			<fileset dir="${solr.real.location}/dist">
				<include name="**/**.jar"/>
			</fileset>
		</copy>

		<!-- copy solr/webapp jars -->
		<mkdir dir="${solr.real.location}/server/solr-webapp/webapp/WEB-INF/lib" />
		<copy todir="${build.dir}/solrjars-extracted/solr">
		    <fileset dir="${solr.real.location}/server/solr-webapp/webapp/WEB-INF/lib">
				<include name="**/**.jar"/>
			</fileset>
		</copy>

		<!-- copy jetty jars -->
		<copy todir="${build.dir}/solrjars-extracted/jetty">
			<fileset dir="${solr.real.location}/server/lib">
				<include name="**/**.jar"/>
			</fileset>
		</copy>

		<!-- cleanup -->
		<delete dir="${build.dir}/solrjars-extracted" includeemptydirs="true">
			<exclude name="**/**.jar"/>
		</delete>

	</target>




	<target name="dist"
	   description="Assembles ADSABS example and starts MontySolr (don't forget to do build-all first)"
	   depends="">

		<exec executable="ant" dir="${common.dir}/contrib/examples" logerror="true"	newenvironment="true">
			<arg line="build-one -Dename=adsabs -Dprofile=normal" />
		</exec>
	</target>



	<target name="install-eclipse-project-files" depends="init" >
		<property name="_home" location="." />

		<exec executable="${python}" failonerror="true" outputproperty="_top_folder" logerror="true">
			<arg value="-c"/>
			<arg value="import os;print os.path.basename(os.path.abspath('.'))" />
		</exec>

		<exec executable="${python}" failonerror="true" outputproperty="_python_ver" logerror="true">
			<arg value="-c"/>
			<arg value="import sys;print '%s.%s' % sys.version_info[:2]" />
		</exec>

		<echo file=".project">
			<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
			<projectDescription>
				<name>]]></echo>
				<echo file=".project" append="true">${_top_folder}</echo>
				<echo file=".project" append="true">
					<![CDATA[</name>
					<comment>
					</comment>
					<projects>
						<project>lucene_solr_3_1</project>
					</projects>
					<buildSpec>
						<buildCommand>
							<name>org.python.pydev.PyDevBuilder</name>
							<arguments>
							</arguments>
						</buildCommand>
						<buildCommand>
							<name>org.eclipse.jdt.core.javabuilder</name>
							<arguments>
							</arguments>
						</buildCommand>
					</buildSpec>
					<natures>
						<nature>org.eclipse.jdt.core.javanature</nature>
						<nature>org.python.pydev.pythonNature</nature>
					</natures>
				</projectDescription>
		   ]]> </echo>

			<echo file=".pydevproject">
&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;?eclipse-pydev version="1.0"?&gt;

&lt;pydev_project&gt;
    &lt;pydev_property name="org.python.pydev.PYTHON_PROJECT_INTERPRETER"&gt;Default&lt;/pydev_property&gt;
    &lt;pydev_property name="org.python.pydev.PYTHON_PROJECT_VERSION"&gt;python ${_python_ver}&lt;/pydev_property&gt;
    &lt;pydev_pathproperty name="org.python.pydev.PROJECT_SOURCE_PATH"&gt;
    &lt;path&gt;/${_top_folder}/src/python&lt;/path&gt;
    &lt;/pydev_pathproperty&gt;
    &lt;pydev_pathproperty name="org.python.pydev.PROJECT_EXTERNAL_SOURCE_PATH"&gt;
    &lt;path&gt;${_home}/build/dist&lt;/path&gt;
    &lt;/pydev_pathproperty&gt;
&lt;/pydev_project&gt;
	   </echo>

			<echo file=".classpath">
				<![CDATA[
              <?xml version="1.0" encoding="UTF-8"?>
				<classpath>
					<classpathentry kind="src" path="src/java"/>
					<classpathentry kind="src" path="test/java"/>
					<classpathentry kind="lib" path="lib/junit-3.8.2.jar"/>
					<classpathentry kind="lib" path="lib/jzlib-1.0.7.jar"/>
					<classpathentry kind="lib" path="lib/commons-io-1.4.jar"/>
					<classpathentry kind="lib" path="lib/slf4j-api-1.5.5.jar"/>
					<classpathentry kind="lib" path="lib/slf4j-jdk14-1.5.5.jar"/>
					<classpathentry kind="lib" path="]]></echo>
	    <echo file=".classpath" append="true">${jcc_egg}/jcc/classes</echo>
		<echo file=".classpath" append="true"><![CDATA["/>
					<classpathentry combineaccessrules="false" kind="src" path="/lucene_solr_3_1"/>
					<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
					<classpathentry combineaccessrules="false" kind="src" path="/jetty-6.1.4"/>
					<classpathentry kind="output" path="bin"/>
				</classpath>
            ]]> </echo>


		</target>


		<!-- to setup dev environment -->
		<target name="eclipse" description="Sets up the dev project for Eclipse" depends="check-solr-location">
			<subant target="ivy-bootstrap" inheritall="false" failonerror="true" buildpath="${solr.real.location}/..">
				<fileset dir="${solr.real.location}/../lucene" includes="build.xml" />
			</subant>

			<!-- this will set the project for lucene/ we'll just copy the files and modify them-->
			<subant target="eclipse" inheritall="false" failonerror="true" buildpath="${solr.real.location}/..">
				<fileset dir="${solr.real.location}/.." includes="build.xml" />
			</subant>

			<copy file="${solr.real.location}/../.project" tofile=".project" overwrite="false"/>
			<copy file="${solr.real.location}/../.classpath" tofile=".classpath" overwrite="true"/>
			<mkdir dir=".settings"/>
			<copy todir=".settings/" overwrite="true">
				<fileset dir="${solr.real.location}/../.settings" includes="*.prefs" />
			</copy>
		</target>

		<target name="modify-eclipse" depends="check-solr-location">
			<copy file="${solr.real.location}/../.classpath" tofile=".classpath" overwrite="true"/>
			<!-- change path to point to the local solr checkout -->
			<property name="_before" value="${solr.real.location}"/>
			<property name="_up" location="${solr.real.location}/.."/>
			<property name="_root" location="."/>
			<script language="javascript">
				<![CDATA[
			var before = project.getProperty("_before");
			var r = project.getProperty("_root");
			var u = project.getProperty("_up");
			var m = before.substring(0, u.length()).substring(r.length()+1).replace("\\", "/") + "/";
			project.setProperty("solr.relative.location", m);
			]]>
			</script>

			<replace file=".classpath">
				<replacefilter token="path=&quot;" value="path=&quot;${solr.relative.location}"/>
				<replacefilter token="output=&quot;" value="output=&quot;${solr.relative.location}"/>
			</replace>
		</target>

		<target name="ex" depends="check-solr-location">
			<ant target="example"
		            dir="${solr.real.location}"
		            inheritall="false" />
		</target>

	</project>
