<?xml version="1.0"?>

<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
 
        http://www.apache.org/licenses/LICENSE-2.0
 
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
 -->

<project name="common" xmlns:artifact="antlib:org.apache.maven.artifact.ant"
                       xmlns:ivy="antlib:org.apache.ivy.ant"
	                   xmlns:junit4="antlib:com.carrotsearch.junit4">
	<description>
    This file is designed for importing into a main build file, and not intended
    for standalone use.
    </description>

	<!--
    ======================================================================
             Selected properties from lucene/common-build.xml 
    ======================================================================  
    //-->

	<dirname file="${ant.file.common}" property="common.dir"/>

	<!-- Give user a chance to override without editing this file
	      (and without typing -D each time it compiles it -->
	<property file="${user.home}/montysolr.build.properties"/>
	<property file="${basedir}/build.properties"/>
	<property file="${common.dir}/build.properties"/>
	<property name="montysolr.dependencies.dir" location="${common.dir}/build/solrjars-extracted" />

	<tstamp>
		<format property="current.year" pattern="yyyy"/>
		<format property="DSTAMP" pattern="yyyy-MM-dd"/>
		<format property="TSTAMP" pattern="HH:mm:ss"/>
		<!-- datetime format that is safe to treat as part of a dotted version -->
		<format property="dateversion" pattern="yyyy.MM.dd.HH.mm.ss" />
	</tstamp>

	<property name="name" value="${ant.project.name}"/>
	<property name="Name" value="MontySolr"/>
	<property name="dev.version" value="6.x-SNAPSHOT"/>
	<property name="tests.luceneMatchVersion" value="6.0"/>
	<property name="version" value="${dev.version}"/>
	<property name="spec.version" value="${version}"/>
	<property name="year" value="2000-${current.year}"/>
	<property name="final.name" value="montysolr-${name}-${version}"/>

	<property name="common.classpath.excludes" value="**/*.txt,**/*.template,**/*.sha1" />

	<property name="ivy.bootstrap.version" value="2.3.0" />
	<property name="ivy.default.configuration" value="*"/>
	<property name="ivy.sync" value="true"/>

	<property name="junit.jar" value="junit-4.10.jar"/>
	<property name="junit-location.jar" value="${common.dir}/lib/${junit.jar}"/>

	<path id="junit-path">
		<fileset dir="${montysolr.dependencies.dir}/solr/test-framework/lib">
			<include name="junit-*.jar" />
			<include name="randomizedtesting-runner-*.jar" />
		</fileset>
	</path>

	<path id="ant-path">
		<fileset dir="${common.dir}/lib" includes="ant-*.jar"/>
	</path>

	<!-- default arguments to pass to JVM executing tests -->
	<property name="args" value=""/>


	<property name="javac.deprecation" value="off"/>
	<property name="javac.debug" value="on"/>
	<property name="javac.source" value="1.8"/>
	<property name="javac.target" value="1.8"/>
	<property name="javac.source.backwards" value="1.8"/>
	<property name="javac.target.backwards" value="1.8"/>
	<property name="javac.args" value="-Xlint -Xlint:-deprecation -Xlint:-serial"/>
	<property name="bootclasspath" value=""/>

	<property name="project.name" value="site"/>
	<property name="build.encoding" value="utf-8"/>

	<property name="src.dir" location="src/java"/>
	<property name="tests.src.dir" location="src/test"/>
	<property name="build.dir" location="build"/>
	<!-- Needed in case a module needs the original build, also for compile-tools to be called from a module -->
	<property name="common.build.dir" location="${common.dir}/build"/>
	<property name="dist.dir" location="${common.dir}/dist"/>
	<property name="maven.dist.dir" location="${dist.dir}/maven"/>
	<property name="m2.repository.url" value="file://${maven.dist.dir}"/>
	<property name="m2.repository.private.key" value="${user.home}/.ssh/id_dsa"/>


	<propertyset id="uptodate.and.compiled.properties" dynamic="true">
		<propertyref regex=".*\.uptodate$$"/>
		<propertyref regex=".*\.compiled$$"/>
	</propertyset>


	<!-- Default exclude sources and javadoc jars from Ivy fetch to save time and bandwidth -->
	<condition property="ivy.exclude.types" 
	      value=""
	      else="source|javadoc">
		<isset property="fetch.sources.javadocs"/>
	</condition>

	<!-- Check for minimum supported ANT version. -->
	<fail message="Minimum supported ANT version is 1.8.2. Yours: ${ant.version}">
		<condition>
			<not>
				<antversion atleast="1.8.2" />
			</not>
		</condition>
	</fail>



	<!--
    ======================================================================
              important paths for MontySolr 
    ======================================================================	
	//-->

	<property file="${common.build.dir}/build.properties" prefix="prop"/>

	<!-- common classpaths that are shareable across montysolr
	               in fact, we try hard to find all the solr/lucene libs
	               as well as setup montysolr project files. Use this in
	               contrib and in main build.xml for classrefs 
	          -->
	<path id="common.classpath">
		<pathelement location="${common.dir}/build/classes/java"/>
		<!-- montysolr jars -->
		<fileset dir="${common.dir}/build/jar">
			<include name = "**/*.jar" />
		</fileset>
		<!-- lucene/solr jars -->
		<fileset dir="${common.dir}/build">
			<include name = "*solrjars-extracted/lucene/lucene-test*.jar" />
			<include name = "*solrjars-extracted/solr/solr-test*.jar" />
		</fileset>
		<fileset dir="${common.dir}/build">
			<include name = "*solrjars-extracted/*.jar" />
			<include name = "*solrjars-extracted/lucene/*.jar" />
			<include name = "*solrjars-extracted/solr/*.jar" />
			<include name = "*solrjars-extracted/solr/solrj-lib/*.jar" />
			<include name = "*solrjars-extracted/jetty/ext/*.jar" />
		</fileset>
		<!-- montysolr lib jars -->
		<fileset dir="${common.dir}/lib">
			<include name = "**/*.jar" />
		</fileset>
	</path>

	<path id="common.demo.classpath">
		<path refid="common.classpath"/>
		<pathelement location="${common.dir}/build/classes/demo"/>
	</path>

	<path id="common.test.classpath">

		<path refid="junit-path"/>
		<path refid="ant-path"/>
		<pathelement location="${common.dir}/build/classes/test"/>

		<!-- these classes cannot be found in solr/lucene jars, they are needed
	                 for proper compilation of unittests -->
		<fileset dir="${common.dir}/build">
			<include name="solrjars-extracted/solr/test-framework/**.jar" />
		</fileset>

		<path refid="common.classpath"/>
	</path>

	<path id="common.junit.classpath">
		<path refid="common.test.classpath"/>
		<path refid="junit-path"/>
		<pathelement location="${common.dir}/build/classes/test"/>
		<pathelement location="${common.dir}/build/classes/java"/>
		<pathelement path="${java.class.path}"/>
	</path>

	<!-- if testcase is specified let the family be empty (to include all) -->
	<condition property="tests.family" value="">
		<isset property="testcase" />
	</condition>
	<condition property="tests.family" value="${testfamily}">
		<isset property="testfamily" />
	</condition>
	<property name="tests.family" value="Test" />

	<!--
	======================================================================
	          SELECTED TARGETS FROM lucene/common-build.xml
	======================================================================
	//-->

	<target name="clean"
    description="Removes contents of build and dist directories">
		<delete dir="${build.dir}"/>
		<delete dir="${dist.dir}"/>
		<delete file="velocity.log"/>
	</target>


	<target name="init" depends="resolve">
		<!-- currently empty -->
	</target>

	<target name="ivy-configure">
		<!-- [DW] ivy loses its configuration for some reason. cannot explain this. if
          you have an idea, fix it.
          unless="ivy.settings.uptodate" -->
		<!-- override: just for safety, should be unnecessary -->
		<ivy:configure file="${common.dir}/ivy-settings.xml" override="true"/>
		<!-- <property name="ivy.settings.uptodate" value="true"/> -->
	</target>

	<target name="resolve" depends="ivy-availability-check,ivy-configure">
		<!-- todo, make this a property or something. 
         only special cases need bundles -->
		<ivy:retrieve type="jar,bundle,test,test-jar,tests" log="download-only"
                  conf="${ivy.default.configuration}" sync="${ivy.sync}"/>
	</target>

	<property name="ivy_install_path" location="${user.home}/.ant/lib" />
	<property name="ivy_bootstrap_url1" value="https://repo1.maven.org/maven2"/>
	<!-- you might need to tweak this from china so it works -->
	<property name="ivy_bootstrap_url2" value="https://uk.maven.org/maven2"/>
	<property name="ivy_checksum_sha1" value="c5ebf1c253ad4959a29f4acfe696ee48cdd9f473"/>

	<target name="ivy-availability-check" unless="ivy.available">
		<condition property="ivy.available">
			<typefound uri="antlib:org.apache.ivy.ant" name="configure" />
		</condition>
		<antcall target="ivy-fail" />
	</target>

	<target name="ivy-fail" unless="ivy.available">
		<echo>
	     This build requires Ivy and Ivy could not be found in your ant classpath.

	     (Due to classpath issues and the recursive nature of the Lucene/Solr 
	     build system, a local copy of Ivy can not be used an loaded dynamically 
	     by the build.xml)

	     You can either manually install a copy of Ivy ${ivy.bootstrap.version} in your ant classpath:
	       http://ant.apache.org/manual/install.html#optionalTasks

	     Or this build file can do it for you by running the Ivy Bootstrap target:
	       ant ivy-bootstrap     
	     
	     Either way you will only have to install Ivy one time.

	     'ant ivy-bootstrap' will install a copy of Ivy into your Ant User Library:
	       ${user.home}/.ant/lib
	     
	     If you would prefer, you can have it installed into an alternative 
	     directory using the "-Divy_install_path=/some/path/you/choose" option, 
	     but you will have to specify this path every time you build Lucene/Solr 
	     in the future...
	       ant ivy-bootstrap -Divy_install_path=/some/path/you/choose
	       ...
	       ant -lib /some/path/you/choose clean compile
	       ...
	       ant -lib /some/path/you/choose clean compile

	     If you have already run ivy-bootstrap, and still get this message, please 
	     try using the "--noconfig" option when running ant, or editing your global
	     ant config to allow the user lib to be loaded.  See the wiki for more details:
	       http://wiki.apache.org/lucene-java/HowToContribute#antivy
    </echo>
		<fail>Ivy is not available</fail>
	</target>
	<target name="ivy-bootstrap" description="Download and install Ivy in the users ant lib dir" depends="ivy-bootstrap1,ivy-bootstrap2,ivy-checksum"/>

	<!-- try to download from repo1.maven.org -->
	<target name="ivy-bootstrap1">
		<ivy-download src="${ivy_bootstrap_url1}" dest="${ivy_install_path}"/>
		<available file="${ivy_install_path}/ivy-${ivy.bootstrap.version}.jar" property="ivy.bootstrap1.success" />
	</target>

	<target name="ivy-bootstrap2" unless="ivy.bootstrap1.success">
		<ivy-download src="${ivy_bootstrap_url2}" dest="${ivy_install_path}"/>
	</target>

	<target name="ivy-checksum">
		<checksum file="${ivy_install_path}/ivy-${ivy.bootstrap.version}.jar"
	              property="${ivy_checksum_sha1}"
	              algorithm="SHA"
	              verifyproperty="ivy.checksum.success"/>
		<fail message="Checksum mismatch for ivy-${ivy.bootstrap.version}.jar. Please download this file manually">
			<condition>
				<isfalse value="${ivy.checksum.success}"/>
			</condition>
		</fail>
	</target>

	<macrodef name="ivy-download">
		<attribute name="src"/>
		<attribute name="dest"/>
		<sequential>
			<mkdir dir="@{dest}"/>
			<echo message="installing ivy ${ivy.bootstrap.version} to ${ivy_install_path}"/>
			<get src="@{src}/org/apache/ivy/ivy/${ivy.bootstrap.version}/ivy-${ivy.bootstrap.version}.jar"
	           dest="@{dest}/ivy-${ivy.bootstrap.version}.jar" usetimestamp="true" ignoreerrors="true"/>
		</sequential>
	</macrodef>





	<target name="compile-core" depends="init">
		<!-- intentionally empty -->
	</target>

	<target name="compile" depends="compile-core">
		<!-- convenience target to compile core -->
	</target>



	<target name="compile-test" depends="compile-core">

	</target>


	<target name="test" depends="compile-test" 
		description="Runs unit tests">
		<mkdir dir="${junit.output.dir}"/>
		<mkdir dir="${common.dir}/build/junit4"/>
	</target>



	<target name="jar" depends="">
		<!-- convenience target to package core JAR -->
	</target>


	<target name="default" depends=""/>



	<!--+
      | M A C R O S
      +-->
	<macrodef name="compile">
		<attribute name="srcdir"/>
		<attribute name="destdir"/>
		<attribute name="javac.source" default="${javac.source}"/>
		<attribute name="javac.target" default="${javac.target}"/>
		<element name="nested" implicit="yes" optional="yes"/>

		<sequential>
			<mkdir dir="@{destdir}"/>
			<javac
            includeAntRuntime="${javac.includeAntRuntime}"
            encoding="${build.encoding}"
            srcdir="@{srcdir}"
            destdir="@{destdir}"
            deprecation="${javac.deprecation}"
            debug="${javac.debug}"
            source="@{javac.source}"
            target="@{javac.target}">

				<!-- <compilerarg line="-Xmaxwarns 10000000"/>
            <compilerarg line="-Xmaxerrs 10000000"/> -->
				<!-- for generics in Java 1.5: -->
				<compilerarg line="-Xlint -Xlint:-deprecation -Xlint:-serial"/>

				<nested/>
			</javac>
		</sequential>
	</macrodef>





	<!-- a cheap unittesting routine that executes all the tests found in the folder and below -->
	<macrodef name="run-python-unittests">
		<attribute name="srcdir"/>
		<attribute name="python"/>
		<attribute name="test-file" default=""/>
		<attribute name="python-path"/>
		<attribute name="failonerror" default="true"/>

		<sequential>
			<apply executable="@{python}" failonerror="@{failonerror}">
				<env key="PYTHONPATH" value="@{python-path}" />
				<arg value="-c" />
				<arg value="import os,sys,unittest;x=sys.argv.pop();print 'Testing ', x;a,b=os.path.split(x);sys.path.insert(0,a);m=__import__(os.path.basename(b.split('.')[0]));y=unittest.main(m)"/>
				<fileset dir="@{srcdir}">
					<include name="**/unittest_*.py"/>
				</fileset>
			</apply>

			<!--
        	<exec executable="@{python}" failonerror="true">
	            <env key="PYTHONPATH" value="@{python-path}${dist.dir}${path.separator}${env.PYTHONPATH}" />
        		<arg value="-c" />
        	    <arg value="x='@{test-file}';import os,sys,unittest;a,b=os.path.split(x);sys.path.insert(0,a);m=__import__(os.path.basename(b.split('.')[0]));y=unittest.main(m)" />
        	</exec>
        	-->
		</sequential>
	</macrodef>

	<macrodef name="get-lucene-solr-package">
		<attribute name="package"/>
		<attribute name="ant" default="${prop.ant}"/>
		<attribute name="ant-target" default="jar"/>
		<attribute name="pattern" default="*.jar"/>
		<attribute name="into" default="${build.dir}/lib"/>


		<sequential>

			<mkdir dir="@{into}"/>


			<!-- cal the ant -->
			<apply executable="@{ant}" parallel="false" failonerror="true" failifexecutionfails="true">
				<arg line="@{ant-target}"/>
				<arg value="-f"/>
				<fileset dir="${prop.solr.home}">
					<include name="lucene/@{package}/build.xml"/>
					<include name="solr/contrib/@{package}/build.xml"/>
				</fileset>
			</apply>


			<!-- then copy the result -->
			<copy todir="@{into}" overwrite="true" verbose="true" flatten="true">
				<fileset dir="${prop.solr.home}">
					<include name="lucene/build/@{package}/@{pattern}" />
					<include name="solr/build/contrib/solr-@{package}/@{pattern}" />
				</fileset>
			</copy>

		</sequential>
	</macrodef>

</project>
